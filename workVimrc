"Alex Hahn's vimrc ... turn up ... try to credit me in a preceeding comment with anything that seems non-trivial <333333333333333333

"A great bit of useful info on good Vim practices, get on that next level kinda stuff but also very useful http://www.oualline.com/vim/10/top_10.html 
"Will post more on my github (destination here) as I go/ make more legit
"
"TODO: embed script "setcolors.vim" inside of this .vimrc? that way <F8> always
"toggles between all avaible color schemes? ... this might take a couple of
"hours...


"TOC (Table of Contents): Sections
"----------------------------------------------------
"TODO's
"THE NO BRAINERS (ABSOLUTELY MUST HAVE)
"TABS AND SPACES
"SEARCH/FIND AND REPLACE
"VISUAL AIDS and some FORMATTING
"GETTING PRO AT VIM (probably aliases, tips, definitely good to look at and
"ponder)

"TODO's
"----------------------------------------------------
"TODO: embed script "setcolors.vim" inside of this .vimrc? that way <F8> always
"toggles between all avaible color schemes? ... this might take a couple of
"hours...
"TODO Make an account on github from laptop, merge all vimrc and bashrc
"profiles from work, cygwin, laptop, and VMs to create a master version 

"THE NO BRAINERS (MUST HAVES!)
"----------------------------------------------------

"Usually keep this as first command in config / .vim rc file... instead of that old school vi feel you get the Vi IMproved (Vim) features/functionality (why is it darker?) it says "set nocompatible" just for reference
set nocompatible

"Turn on line numbers... a must have
set number

"Syntax highlighting, hella tight 
syntax on

"Sometimes (for more advanced users) the ability to use plugins is
"extremely helpful and allows you to bootstrap your vim profile 
filetype plugin on


"Uncomment one of the color schemes. Make sure that you have the .vim/colors/ library and corresponding schemes installed
"colorscheme blue
"colorscheme koehler
colorscheme gruvbox
"colorscheme badwolf
"colorscheme Malokai



"This actually doesn't physically change the background color usually but rather tells vim what it looks like for other uses. Also, I'm not sure of this but if there is a light version also, this picks the dark one (fuck the light ones lol)
set bg=dark


"get backspace to work right how you intuitively think it should (this can
"get wacky on certain systems, it has to do with hardware and input
"confusion/overloading but like, wepa, this'll prolly clear it up
set backspace=indent,eol,start





"TABS AND SPACES"
"----------------------------------------------------

"Instead of annoying tab characters (jumps a bunch of spaces, hard to control) we equivalently insert a certain number of spaces characters (spaces) which gives us more maneuvrability (spelling? see spellcheck)  
set expandtab

"This controls how many spaces hitting tab moves over (remember tabstop now makes these actual spaces rather than jumps!)
set tabstop=4

"Uses tabs better, ie shiftwith instead of tab stop at the start of lines (then switches), I think this also might change and auto format differently for different file types (extensions) which would be pretty cool but idk for sure
set smarttab 

"Set the number of space characters inserted for indentation
set shiftwidth=4

"This simply keeps indentation from the previous line, very usefull for keeping the syntax of code blocks consistent TODO: customize indents for filetypes later?
set autoindent

"Usually pretty good but sometimes certain key words cause unintended indents (not too crazy inconvenient though), supports smart indenting of common PL's. New line also triggers indent
set smartindent




"SEARCH/FIND AND REPLACE
"----------------------------------------------------
"Case insensitive search/find/replace (? / stuff). Kind of funny that there's a set noic / set noignorecase option lol... double negatives ftw. Also note that smartcase doesn't really ever hurt this like some people say/think; lower case searches become case insensitive and smart case makes it so that if you search with capitals it sticks to that format, ie superset and subset thinking!
set ignorecase

"Messes with buffers and writing, good idea to have. With this opening a new file when the current buffer has unsaved changes causes files to be hidden instead of closed (and no 'E37: No write since last change (add ! to override)' error. All unsaved changes can still be accessed by typing :ls and then :b[N], where [N] is the number of a buffer (look online for buffer tutorial stuff)
set hidden

"When a pattern (search ? or /) it IS case sensitive
set smartcase

"By default, searching starts after you enter the string, with incsearch it searches incrementally with the first character and refines as you go!
set incsearch

"Turns on search highlighting, great feature
set hlsearch

"Visual mode pressing * or # searches for the current selection
"Pretty useful - credit to Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

"Map <C-L> (redraw screen) to also turn off search highlighting until the
"next search
nnoremap <C-L> :nohl<CR><C-L>






"VISUAL AIDS and some FORMATTING
"----------------------------------------------------

"A little more of a controversial but potentially helpful command, showmatch causes vim to moce the cursor to previos matching bracket ([{}]) for a quick moment and pressing any other key will quickly ignore it so rapid typing is not interupted
set showmatch



"set the momentary duration of showmatch (in tenths of a second)
set matchtime=4


"REPEATED FROM MUST HAVE SECTION BUT ALSO FITS HERE: This actually doesn't physically change the background color usually but rather tells vim what it looks like for other uses. Also, I'm not sure of this but if there is a light version also, this picks the dark one (fuck the light ones lol)
"set bg=dark

"highlights the current line the cursor is on. Pretty useful, if you highlight the character (column) too it can become a little too much visually
set cursorline

"Highlight in red if surpass 80 character limit (mainly for coding/style... especially if you're a kernal developer!) turn off (Comment out) for not coding ie .tex .doc etc
highlight Overlength ctermbg=red ctermfg=white guibg=#592929
match Overlength /\%80v.\+/  


"only cuts the line on whitespace... not in the middle of a work, good linebreak style
set lbr

"set how wide lines can be (how many characters) note that the higlighting 80+ lines code might be unnecessary with this (edit: still effective)
set textwidth=79

"Very useful if you're using textwidth, automatically gets as close to the limit as possible without going over
set formatoptions+=t

"set how autoformatting is done: t=textwidth, c=comments, q=allow 'gq' to
"work, r=(in mail) comment leader after
set formatoptions=tcql

"Another more robust over 80 char highlighting command: once again... use when
"best (uncomment to use):
"augroup vimrc_autocmds
"    autocmd BufEnter * highlight OverLength ctermbg=red
"    autocmd BufEnter * match OverLength /\%80v.*/
"augroup END

"Set the command window height to 2 lines (many times you actually have to hit
"enter to view continue\finish viewing)
set cmdheight=2




"GETTING PRO AT VIM
"----------------------------------------------------

"DISABLE USING ARROW KEYS! This will mess you up big time to start but in the long run will make you an absolute pro at coding/vim. The whole point of vim is to ergonomically allocate keyboard space and characters. j and k are up and down and h and l are left and right on the home keys for a reason! Avoid carpal tunnel! It sux, trust me! use smart key bindings and always be looking to improve. Sorry for the suffering in advance this will cause but really keep this in your .vimrc so you get pro!!!

"(disable arrows in command mode)
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"(disable arrows in insert mode)
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>


"AN ABSOLUTE MUST: REBIND escape key, you look like an idiot and it's very slow to keep reaching with that pinky, I would consider disabling it (see format above) but sometimes it is worth having it (ie accidently hitting CAPS lock). Instead either bind (my favorite) jk to escape (or jj), great way to get out of insert mode quick without moving hands. Many somehow rebind the caps lock key but this is actually a little bit harder than one might think, and jk is just toooo good in my opinion
imap jk <ESC>

"Another ABSOLUTELY ESSENTIAL mapping is : to ; hitting shift for the split second your off sucks and is often messed up, just keep ; and : is unfallable!
nmap ; :

"Command line tab completion (think about cycling through :colorscheme (tab
"tab...)
set wildmenu

"First tab will complete the longest common string and will invoke wildmenu
"(horezontal and not that obstructive), the next tab will complete the first
"alternative and will then cycle through the rest
set wildmode=longest:full,full 


"Show the characters in the command as you go
set showcmd


"Unfortunately h and l don't wrap to after end of line characters... this is
"extremely annoying, but this solves it!
set whichwrap+=<,>,h,l,[,]

"A pretty neat and useful feature, ruler brings up a status line at the bottom
"of the vim editor that tells you: the line number, column number,virtual
"column number, and the relative position of the cursor in the file (As a
"percentage)
set ruler

"Stop certain movements from always going to the first character of the line
"(instead go to actual non whitespace). Pretty handy and usually what most of
"the time (if not all) you want. Most other text editors have this
set nostartofline

"Always display the status line, even if only one window is displayed
set laststatus=2


"Attempt to determine the type of a file based on its name and possibly
"contents. Helps auto-indenting for each filetype and for plugins that are
"filetype specific
filetype indent plugin on

"Instead of failing a command because of unsaved changes, instead raise a
"dialogue asking if you wish to save changed files
set confirm

"Use a visual bell instead of audio (...not actually a huge fan of this one, but
"I guess with no sound it be helpful, uncomment for it)
"set visualbell


"Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

"Use <f11> to toggle between 'paste and 'nopaste'. I actually don't use this
"much but maybe I should...
set pastetoggle=<F11>

"Map Y to act like D and C, ie to yank until EOL rather than act like yy wich is
"default (maybe this is useful though?)
map Y y


"Automatically remove all trailing whitespace before saving (THIS CAN BE
"DANGEROUS BY ITSELF, SOMETIMES FILES NEED TRAILING WHITESPACE!)
"autocmd BufWritePre * :%s/\s\+$//e

"so instead let's mess with certain filetypes only!
autocmd FileType c,ccp,java,php autocmd BufWritePre <buffer> : %s/\s\+$//e


"set spell check on and set English as default language
set spell spelllang=en_us

"Automatically change the working directory to the location of the file being
"edited. (sometimes doesn't work for certain files/ plugins, see
"preceeding comments)... it's clutch doe
set autochdir

"simulating this for all files we can use:
"autocmd BufRead,BufNewFile * cd %:p:h
"autocmd BufEnter           * cd %:p:h

"If you want longlines to just be broken at some specified width
"visually but have no new line characters use this, I don't recommend
"A)because it is harder to maneuver in vim B) just don't go over 80 char
"anyways... Could be helpful in comments and other docs doe?
"set wrap

:nnoremap <F5> :buffers<CR>:buffer<Space>
